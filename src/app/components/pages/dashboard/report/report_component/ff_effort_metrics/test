<?php

namespace App\Http\Controllers;

use App\Http\Requests;
use App\Model;
use App\User;
use Illuminate\Support\Facades\Cookie;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Session;
use Validator;
use Request;
use Input;
use DB;
use select;
use File;
use App\SocialAccountService;
use Socialite;

class LoginController extends BaseController {

    /**
     * User Login Form
     */
    protected $city;
    protected  $country;
    public function index() {

        // View Data
        $data = array();
        return view('login', $data);
    }

    /**
     * Login User
     */
    public function login(Requests\LoginRequest $request) {
        // Get all data
        $fields = $request->all();

		if(isset($fields['keepme'])){
		$remember = ($fields['keepme']) ? true : false;

		$encoded = base64_encode($fields['password']);
		if($remember){
			$cookie=array(
				'email'=>$fields['email'],
				'password'=>$encoded
			);
			$json = json_encode($cookie);
			setcookie('remember_me', $json, time() + (86400 * 14), "/"); // 86400 = 1 day
		}
		else{

		}
		}

        // Validator
        $validator = Validator::make([], []);

        // Get user from database
        /*$user = User::select('users.*')->getByEmail($fields['email'])
            ->joinRole()->where('roles.name', '!=', 'BROKER')
            ->first();*/

		$user = User::select('users.*')->getByEmail($fields['email'])
            ->joinRole()->first();

        if (!isset($user) || !password_verify($fields['password'], $user->password)) {
            $validator->getMessageBag()->add("error", "Invalid login details");

            // Validation failed redirect to Login
            return Redirect::to('login')->withInput($request->all())->withErrors($validator);
        }


















 $hostname = 'localhost';
	    $username = 'property_gcm';
	    $password = 'proctor123';
	    $dbname = 'property_gcm_reg';
	    $con = @mysqli_connect($hostname, $username, $password, $dbname);


		/*   $conn = mysql_connect("localhost", "deesashr_deesa","innodbs321");
		   if(!$conn){
			die('MySQL connection failed');
		   }

		   $db = mysql_select_db("deesashr",$conn);
		   if(!$db){
			die('Database selection failed');
		   }
		 */

		   $registatoin_ids = array();
		   $sql = "SELECT DISTINCT gcm_registration_ids FROM gcm_reg_ids";
		   $result = mysqli_query($con,$sql);
		   while($row = @mysqli_fetch_assoc($result)){
			array_push($registatoin_ids, $row['gcm_registration_ids']);
			//array_push($registatoin_ids, 'n0xMsuNBLIw:APA91bFD2GbGZc8WqxORbI3BWv-0h3LbrO8awnIye6GWqyKRMCLdaOmIFwwgRQwJHU6JBrrltz0I8Lpp4Lnh9AhGIVxaOUJmRRZ98jFPNWLPUrosJX20_XIpMcByKw_epqFADKtuff1r');
		   }

		   // Set POST variables
				 $url = 'https://android.googleapis.com/gcm/send';

			$message = array("title" => 'Someone Logged In', "body" => 'Please click to view site', "sound" => 'default');
			$message1 = array("notification" => '', "url" => 'http://propertyproctor.com/');
			//$message = array("title" => 'News added. Please click to view...', "body" => 'http://deesashrimali.com.bh-in-20.webhostbox.net/news.php');
			//$message1 = array("notification" => 'News added. Please click to view...', "url" => 'http://deesashrimali.com.bh-in-20.webhostbox.net/news.php');

				 $fields = array(
					 //'to' => $registatoin_ids,
					 'registration_ids' => $registatoin_ids,
					 'content_available' => true,
					 //'aps' => array("alert" => 'News added', "badge" => 1),
					 'priority' => 'high',
					 'notification' => $message,
					 'data' => $message1
				 );

				 $headers = array(
					 //'Authorization: key=AIzaSyBx4pn_d5-KqrJRKM5I-irFNZva3JpqKWA',
					 'Authorization: key=AIzaSyDLQXPerbgrC1IKnPGmwRyS1B4KPXAHlTY',
					 'Content-Type: application/json'
				 );
				 // Open connection
				 $ch = curl_init();

				 // Set the url, number of POST vars, POST data
				 curl_setopt($ch, CURLOPT_URL, $url);

				 curl_setopt($ch, CURLOPT_POST, true);
				 curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
				 curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

				 // Disabling SSL Certificate support temporarly
				 curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

				 curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));

				 // Execute post
				 $result = curl_exec($ch);
				 if ($result === FALSE) {
					 die('Curl failed: ' . curl_error($ch));
				 }

				 // Close connection
				 curl_close($ch);









		if($user->verified!=0 && $user->verified!=NULL){
			// Login Successful
			$user->login();

			$cookie = Cookie::forever('auth_token', $user->auth_token);
			return Redirect::to('/dashboard')->withCookie($cookie);
		}
		else{
			$digits = 4;
			$rand =str_pad(rand(0, pow(10, $digits)-1), $digits, '0', STR_PAD_LEFT);
			$email=$user->email;
			DB::statement("UPDATE users SET verification_code='$rand'
		  where email='$email'");

			$from = 'support@propertyproctor.com';
			$cc='support@propertyproctor.com';
			$cc2='sp.innovizia@gmail.com';
			//$to =$user->email;
			$to =$user->email;
			$subject = 'Property proctor';

			$message = '<html><head></head><body><div style="width:94%; background-color: #efefef; padding: 50px 20px 30px 20px;">';
			$message .= '<div style="background:#f8f8f8;padding:10px 20px;">';
			$message .= '	<div>';
			$message .= '		<img src="http://propertyproctor.com/images/mail_logo.png" alt="defaultImage" />';
			$message .= '	</div>';
			$message .= '	<div>';
			$message .= '	</div>';
			$message .= '</div>';
			$message .= '<div style="padding:20px; background-color: #fff;">';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif; font-weight:bold; text-transform: capitalize;">Dear '.$user->first_name.',</p>';

			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">This is your first step towards hassle free increment of income from your rentable property.</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Please expect an email from us guiding you the way to reach your goal of achieving hassle free income from your rentable property.</p>';

			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;font-weight:bold">Put the following code at the verification page in the website so that you can continue using propertyproctor.com</p>';


			$message .= '<p style="color:#e88738;font-size: 22.0pt;font-family: Calibri,sans-serif;font-weight:bold">'.$rand.'</p>';

			/*$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">To verify your email adress please <a target=_blank href=http://propertyproctor.com/login/'.$id.'>click here</a>  </p>';*/

			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Wish you great hassle free earnings.</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;font-weight:bold">Property Proctor Team</p>';
			$message .= '</div>';
			$message .= '<div style="background:#f8f8f8;padding:5px 20px;">';
			$message .= '	<div>';
			$message .= '		<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;"> This is an auto-generated email. Please do not reply. </p>';
			$message .= '	</div>';
			$message .= '	<div>';
			$message .= '	</div>';
			$message .= '</div>';
			$message .= '</div></body></html>';

			$headers = 'From: '. $from ."\r\n" .
			'Bcc: '. $cc ."\r\n" .
			'Bcc: '. $cc2 ."\r\n" .
			'X-Mailer: PHP/' . phpversion().
			'MIME-Version: 1.0' . "\r\n".
			'Content-type: text/html; charset=iso-8859-1' . "\r\n";

			$retval = mail($to,$subject,$message,$headers);
			return  Redirect::to('/owner_verification/'.base64_encode($email));
		}
    }
	/**
     * Owner verification Form Display
     */
    public function verifyOwnerForm($code) {
		$email=base64_decode($code);
		$user = User::select('users.*')->getByEmail($email)
            ->joinRole()->first();
		$code=$user->verification_code;
		$data = array(
            'code' => $code	,
			'email' =>$email
        );
        return view('verify_owner',$data);
    }
	/**
     * Owner verification Form Display
     */
    public function verifyOwner(Requests\LoginVerificationRequest $request) {
		$fields = $request->all();
		$verify_hidden=$fields['verify_hidden'];
		$email=$fields['email_hidden'];
		$user = User::select('users.*')->getByEmail($email)
            ->joinRole()->first();
		$verify=$fields['verify'];
		if($user->verification_code==$verify){
			DB::statement("UPDATE users SET verified =1 where email='$email'");
			$user->login();

			$cookie = Cookie::forever('auth_token', $user->auth_token);
			return Redirect::to('/dashboard')->withCookie($cookie);
		}
		else{
			echo 'Enter Valid code';
			//return  Redirect::to('/login');
		}
    }
	 /**
     * Login User
     */
    public function email_verify($id) {

		$email=DB::select( DB::raw("SELECT email from users where users.id=$id") );
		$email=$email[0]->email;
		 DB::statement("UPDATE users SET verified =1
		  where users.id = $id");
		if(isset($this->userService->user->id) && $this->userService->user->id==$id ){
			$user = User::select('users.*')->getByEmail($email)->first();
			$user->login();

			setcookie("dash", "view_dash", time() + (86400 * 30), "/"); // 86400 = 1 day

			$cookie = Cookie::forever('auth_token', $user->auth_token);
			return Redirect::to('/dashboard')->withCookie($cookie);
		}
		else{
			$validator = Validator::make([], []);

			$user = User::select('users.*')->getByEmail($email)->first();

			if (!isset($user) || !password_verify($user->password, $user->password)) {
				$validator->getMessageBag()->add("error", "Invalid login details");

				// Validation failed redirect to Login
				return Redirect::to('login')->withInput(Input::all())->withErrors($validator);
				return view('login');
			}

			// Login Successful
			$user->login();

			setcookie("dash", "view_dash", time() + (86400 * 30), "/"); // 86400 = 1 day

			$cookie = Cookie::forever('auth_token', $user->auth_token);
			return Redirect::to('/dashboard')->withCookie($cookie);
		}


    }
	/**
     * login popup Form Display
     */
    public function login_popup() {
		 // Get all data
        $email = Input::get('inputEmail');
		$password = Input::get('inputPassword');

		$remember = (Input::has('inputkeepme')) ? true : false;

		$encoded = base64_encode($password);
		if($remember){
			$cookie=array(
				'email'=>$email,
				'password'=>$encoded
			);
			$json = json_encode($cookie);
			setcookie('remember_me', $json, time() + (86400 * 14), "/"); // 86400 = 1 day
		}
		else{

		}
        // Validator
        $validator = Validator::make([], []);

        // Get user from database
        /*$user = User::select('users.*')->getByEmail($fields['email'])
            ->joinRole()->where('roles.name', '!=', 'BROKER')
            ->first();	*/

		$user = User::select('users.*')->getByEmail($email)->first();

        if (!isset($user) || !password_verify($password, $user->password)) {
            $validator->getMessageBag()->add("error", "Invalid login details");

            // Validation failed redirect to Login
			return Redirect::to('login')->withInput(Input::all())->withErrors($validator);
            return view('login');
        }

		if($user->verified!=0 && $user->verified!=NULL){
        // Login Successful
        $user->login();

		setcookie("dash", "view_dash", time() + (86400 * 30), "/"); // 86400 = 1 day

        $cookie = Cookie::forever('auth_token', $user->auth_token);
        return Redirect::to('/dashboard')->withCookie($cookie);
		}
		else{
			$digits = 4;
			$rand =str_pad(rand(0, pow(10, $digits)-1), $digits, '0', STR_PAD_LEFT);
			$email=$user->email;
			DB::statement("UPDATE users SET verification_code='$rand'
		  where email='$email'");

			$from = 'support@propertyproctor.com';
			$cc='support@propertyproctor.com';
			$cc2='sp.innovizia@gmail.com';
			//$to =$user->email;
			$to =$user->email;
			$subject = 'Property proctor';

			$message = '<html><head></head><body><div style="width:94%; background-color: #efefef; padding: 50px 20px 30px 20px;">';
			$message .= '<div style="background:#f8f8f8;padding:10px 20px;">';
			$message .= '	<div>';
			$message .= '		<img src="http://propertyproctor.com/images/mail_logo.png" alt="defaultImage" />';
			$message .= '	</div>';
			$message .= '	<div>';
			$message .= '	</div>';
			$message .= '</div>';
			$message .= '<div style="padding:20px; background-color: #fff;">';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif; font-weight:bold; text-transform: capitalize;">Dear '.$user->first_name.',</p>';

			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">This is your first step towards hassle free increment of income from your rentable property.</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Please expect an email from us guiding you the way to reach your goal of achieving hassle free income from your rentable property.</p>';

			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;font-weight:bold">Put the following code at the verification page in the website so that you can continue using propertyproctor.com</p>';


			$message .= '<p style="color:#e88738;font-size: 22.0pt;font-family: Calibri,sans-serif;font-weight:bold">'.$rand.'</p>';

			/*$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">To verify your email adress please <a target=_blank href=http://propertyproctor.com/login/'.$id.'>click here</a>  </p>';*/

			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Wish you great hassle free earnings.</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;font-weight:bold">Property Proctor Team</p>';
			$message .= '</div>';
			$message .= '<div style="background:#f8f8f8;padding:5px 20px;">';
			$message .= '	<div>';
			$message .= '		<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;"> This is an auto-generated email. Please do not reply. </p>';
			$message .= '	</div>';
			$message .= '	<div>';
			$message .= '	</div>';
			$message .= '</div>';
			$message .= '</div></body></html>';

			$headers = 'From: '. $from ."\r\n" .
			'Bcc: '. $cc ."\r\n" .
			'Bcc: '. $cc2 ."\r\n" .
			'X-Mailer: PHP/' . phpversion().
			'MIME-Version: 1.0' . "\r\n".
			'Content-type: text/html; charset=iso-8859-1' . "\r\n";

			$retval = mail($to,$subject,$message,$headers);
			return  Redirect::to('/owner_verification/'.base64_encode($email));
		}

    }

	/**
     * Popup Registration Form
     *
     * @param Requests\InquiryRequest $request
     * @return mixed
     */
    public function popup_registration() {
       /* $fields = $request->all();*/


	   if(Request::ajax()) {
	      $data2 = Input::all();
        }
	    $name = $data2['inputname'];
		$pwd2 = $data2['inputPassword'];
		$pwd = $data2['inputPassword'];
		$pwd = password_hash($pwd, PASSWORD_DEFAULT);
		$email = $data2['inputEmail'];
        /*users::create([
            'name' => Input::get('inputname'),
            'password' => Input::get('inputPassword'),
			'email' => Input::get('inputEmail'),
        ]);*/
		$digits = 4;
		$rand =str_pad(rand(0, pow(10, $digits)-1), $digits, '0', STR_PAD_LEFT);
		//$rand = random_string('nozero', 4, uniqid());

        /*Session::flash('success', 'Inquiry details saved. We will revert in 24 Hours.');*/
		$verifyemail=DB::select( DB::raw("SELECT email from users where email='$email'") );
		if (sizeof($verifyemail)>0 && $email!='') {
		   // user found
		   $show="hide";
		}
		else{
			$show="success";
			DB::insert( DB::raw("insert into users  VALUES (NULL, '$email', NULL, 'active', '$pwd', NULL, NULL, NULL, NULL, NULL, '$name', NULL, NULL, NULL, NULL, NULL, NULL, 'time()', 'time()', 1, NULL, NULL,NULL,NULL,NULL,NULL,0,'$rand')") );
		$id=DB::getPdo()->lastInsertId();
		}
		$from = 'support@propertyproctor.com';
		$cc='support@propertyproctor.com';
		$cc2='sp.innovizia@gmail.com';
        //$to =$user->email;
		$to =$email;
		$subject = 'Property proctor';

		$message = '<html><head></head><body><div style="width:94%; background-color: #efefef; padding: 50px 20px 30px 20px;">';
		$message .= '<div style="background:#f8f8f8;padding:10px 20px;">';
		$message .= '	<div>';
		$message .= '		<img src="http://propertyproctor.com/images/mail_logo.png" alt="defaultImage" />';
		$message .= '	</div>';
		$message .= '	<div>';
		$message .= '	</div>';
		$message .= '</div>';
		$message .= '<div style="padding:20px; background-color: #fff;">';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif; font-weight:bold; text-transform: capitalize;">Dear '.$name.',</p>';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Thank you for signing up with www.propertyproctor.com</p>';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">This is your first step towards hassle free increment of income from your rentable property.</p>';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Please expect an email from us guiding you the way to reach your goal of achieving hassle free income from your rentable property.</p>';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Your login details are given below'.'</p>';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">User Id: '.$email.'<br>Password: '.$pwd2.'</p>';

		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;font-weight:bold">Put the following code at the verification page in the website so that you can continue using propertyproctor.com</p>';


		$message .= '<p style="color:#e88738;font-size: 22.0pt;font-family: Calibri,sans-serif;font-weight:bold">'.$rand.'</p>';

		/*$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">To verify your email adress please <a target=_blank href=http://propertyproctor.com/login/'.$id.'>click here</a>  </p>';*/

		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Wish you great hassle free earnings.</p>';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;font-weight:bold">Property Proctor Team</p>';
		$message .= '</div>';
		$message .= '<div style="background:#f8f8f8;padding:5px 20px;">';
		$message .= '	<div>';
		$message .= '		<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;"> This is an auto-generated email. Please do not reply. </p>';
		$message .= '	</div>';
		$message .= '	<div>';
		$message .= '	</div>';
		$message .= '</div>';
		$message .= '</div></body></html>';

		$headers = 'From: '. $from ."\r\n" .
		'Bcc: '. $cc ."\r\n" .
		'Bcc: '. $cc2 ."\r\n" .
		'X-Mailer: PHP/' . phpversion().
		'MIME-Version: 1.0' . "\r\n".
		'Content-type: text/html; charset=iso-8859-1' . "\r\n";

        $retval = mail($to,$subject,$message,$headers);
		if( $retval == true ) {
           //echo "sent";
         }else {
            //echo "Message could not be sent...";
         }
        // View data
		$data = array(
            'email' => $email,
			'password' =>$pwd2,
			'verification_code' =>$rand,
			'show' => $show
        );
        return $data;




        //return view('pages/how_it_works', ['propertyshow' => $show]);
    }


	/**
     * login redirect
     */
    public function login_redirect() {
		 // Get all data
		 if(Request::ajax()) {
	      $data2 = Input::all();
        }
        $email = $data2['inputEmail'];;
		$password = $data2['inputPassword'];


        // Validator
        $validator = Validator::make([], []);

        // Get user from database
        /*$user = User::select('users.*')->getByEmail($fields['email'])
            ->joinRole()->where('roles.name', '!=', 'BROKER')
            ->first();	*/

		$user = User::select('users.*')->getByEmail($email)->first();
		/*$user=DB::select( DB::raw("select * from users where email='$email'") ); */
		$email=$user->email;
		DB::statement("UPDATE users SET verified =1
		  where email='$email'");

       if (!isset($user) || !password_verify($password, $user->password)) {
            $validator->getMessageBag()->add("error", "Invalid login details");

            // Validation failed redirect to Login
			return Redirect::to('login')->withInput(Input::all())->withErrors($validator);
            return view('login');
        }

        // Login Successful
        $user->login();

        $cookie = Cookie::forever('auth_token', $user->auth_token);
        return Redirect::to('/dashboard')->withCookie($cookie);

    }
    /**
     * Owner registration Form Display
     */
    public function ownerRegistrationForm() {

        // View Data
        $data = array(
            'userService' => $this->userService
        );
        return view('create_owner', $data);
    }

    /**
     * Register Owner
     *
     * @param Requests\OwnerRegistrationRequest $request
     * @return mixed
     */
    public function registerOwner(Requests\OwnerRegistrationRequest $request) {

        $fields = $request->all();

        // Create Owner
		$digits = 4;
		$rand =str_pad(rand(0, pow(10, $digits)-1), $digits, '0', STR_PAD_LEFT);

        //$user = $this->userService->create_owner($fields);

		$user =User::create([
            'first_name' => $fields['first_name'],
            'last_name' => $fields['last_name'],
            'email' => $fields['email'],
            'phone' => $fields['phone'],
            'password' => password_hash($fields['password'], PASSWORD_DEFAULT),
            'role_id'=> '1',
			'state_id'=>$fields['state'],
            'city_id'=>$fields['city'],
            'country_id'=>$fields['country'],
			'verified'=>'0',
			'verification_code'=>$rand
        ]);

        /*$this->sendRegistrationEmail($user); */
		$from = 'support@propertyproctor.com';
		$cc='support@propertyproctor.com';
		$cc2='sp.innovizia@gmail.com';
        $to =$user->email;
		$subject = 'Property proctor';

		$message = '<html><head></head><body><div style="width:94%; background-color: #efefef; padding: 50px 20px 30px 20px;">';
		$message .= '<div style="background:#f8f8f8;padding:10px 20px;">';
		$message .= '	<div>';
		$message .= '		<img src="http://propertyproctor.com/images/mail_logo.png" alt="defaultImage" />';
		$message .= '	</div>';
		$message .= '	<div>';
		$message .= '	</div>';
		$message .= '</div>';
		$message .= '<div style="padding:20px; background-color: #fff;">';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif; font-weight:bold; text-transform: capitalize;">Dear '.$user->first_name.' '.$user->last_name.',</p>';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Thank you for signing up with www.propertyproctor.com</p>';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">This is your first step towards hassle free increment of income from your rentable property.</p>';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Please expect an email from us guiding you the way to reach your goal of achieving hassle free income from your rentable property.</p>';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Your login details are given below'.'</p>';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">User Id: '.$user->email.'<br>Password: '.$fields['password'].'</p>';

		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;font-weight:bold">Put the following code at the verification page in the website so that you can continue using propertyproctor.com</p>';


		$message .= '<p style="color:#e88738;font-size: 22.0pt;font-family: Calibri,sans-serif;font-weight:bold">'.$rand.'</p>';

		/*$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">To verify your email adress please <a target=_blank href=http://propertyproctor.com/login/'.$user->id.'>click here</a> </p>';*/

		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Wish you a great hassle free earnings.</p>';
		$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif; font-weight:bold">Property Proctor Team</p>';
		$message .= '</div>';
		$message .= '<div style="background:#f8f8f8;padding:5px 20px;">';
		$message .= '	<div>';
		$message .= '		<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;"> This is an auto-generated email. Please do not reply. </p>';
		$message .= '	</div>';
		$message .= '	<div>';
		$message .= '	</div>';
		$message .= '</div>';
		$message .= '</div></body></html>';

		$headers = 'From: '. $from ."\r\n" .
		'Bcc: '. $cc ."\r\n" .
		'Bcc: '. $cc2 ."\r\n" .
		'X-Mailer: PHP/' . phpversion().
		'MIME-Version: 1.0' . "\r\n".
		'Content-type: text/html; charset=iso-8859-1' . "\r\n";

        $retval = mail($to,$subject,$message,$headers);
		if( $retval == true ) {
           echo "sent";
         }else {
            echo "Message could not be sent...";
         }

        // render view
        Session::flash('success', 'Registered Successfully. Please login now.');
        //return redirect('login');
		return  Redirect::to('/owner_verification/'.base64_encode($user->email));
    }

    /**
     * Moderator Registration Form Display
     */
    public function moderatorRegistrationForm () {

    }

    /**
     * Register New Moderator
     */
    public function registerModerator() {

    }

    /**
     * Logout from the system
     *
     * @return mixed
     */
    public function logout() {

        if (isset($this->userService)) {
            $this->userService->logout();
        }

		if (Cookie::get('dash') !== false) {
			setcookie("dash", "", time() + (86400 * 30), "/");
		}

        //return redirect("/login")->withCookie(Cookie::forget('auth_token'));
		return redirect("/")->withCookie(Cookie::forget('auth_token'));
    }

    /**
     * Forgot Password View
     *
     * @return mixed
     */
    public function forgot_password_index() {
        return view('forgot_password');
    }

    /**
     * Forgot password change
     *
     * @param Requests\ForgotPasswordRequest $request
     */
    public function forgot_password(Requests\ForgotPasswordRequest $request) {
        $fields = $request->all();

        // Get user
        $user = User::getByEmail($fields['email'])->first();

        // Get Token
        $user->remember_token = rand(111111,999999);
        $user->save();

        // Send Email
        $this->sendEmail($user);

        // Flash Email sent
        Session::flash('success', 'Confirmation code Email is sent.');

        return Redirect::to('change_password');
    }

    /**
     * Change forgot password
     *
     * @return mixed
     */
    public function change_password_index() {
        return view('change_password');
    }

    /**
     * Change forgot Password
     *
     * @param Requests\ChangePasswordRequest $request
     * @return mixed
     */
    public function change_password(Requests\ChangePasswordRequest $request) {
        $fields = $request->all();

        // Get User
        $user = User::getByRememberToken($fields['confirmation_code'])->first();

        // Reset Password
        $user->password = password_hash($fields['new_password'], PASSWORD_DEFAULT);
        $user->remember_token = null;
        $user->save();

        // Redirect
        Session::flash('success', 'Password Changed Successfully. Please Login');
        return Redirect::to('login');
    }

    /**
     * Reset forgot password
     *
     * @return mixed
     */
    public function reset_password_index() {

        $data = array(
            'userService' => $this->userService
        );
        return view('reset_password', $data);
    }

    /**
     * Reset forgot Password
     *
     * @param Requests\ResetPasswordRequest $request
     * @return mixed
     */
    public function reset_password(Requests\ResetPasswordRequest $request) {
        $fields = $request->all();
		$validator = Validator::make([], []);
        // Get User
        $user = $this->userService->user;

		if (!isset($user) || !password_verify($fields['old_password'], $user->password)) {
            $validator->getMessageBag()->add("error", "Invalid password details");

            // Validation failed redirect to Login
			return Redirect::to('edit_profile_index')->withInput($request->all())->withErrors($validator);
        }

        // Reset Password
        $user->password = password_hash($fields['new_password'], PASSWORD_DEFAULT);
        $user->remember_token = null;
        $user->save();

        // Redirect
        Session::flash('success', 'Password Changed Successfully');
        return Redirect::to('/edit_profile_index');
    }
	/**
     * Edit Profile
     *
     * @param Requests\ResetPasswordRequest $request
     * @return mixed
     */
    public function edit_profile_index() {
        $ownerid=$this->userService->user->id;
		$owners_city=DB::select( DB::raw("SELECT cities.id,cities.name as city_name FROM users join cities on cities.id=users.city_id where users.id=$ownerid") );
		$owners_country=DB::select( DB::raw("SELECT countries.id,countries.name as country_name,users.country_id FROM users join countries on countries.id=users.country_id where users.id=$ownerid") );
		$owners_state=DB::select( DB::raw("SELECT states.id,states.name as state_name,users.state_id FROM users join states on states.id=users.state_id where users.id=$ownerid") );

		if(!empty($this->userService->user->country_id)){
			$country_id=$this->userService->user->country_id;
			$countrylist=DB::select( DB::raw("SELECT id,name from countries") );

			$statelist=DB::select( DB::raw("SELECT id,name from states where country_id=$country_id order by name asc") );
			if(!empty($this->userService->user->state_id)){
				$state_id=$this->userService->user->state_id;;

				if($state_id!=''){
					$citylist=DB::select( DB::raw("SELECT id,name from cities where state_id=$state_id order by name asc") );

				}
				else{
					$citylist='';
				}
			}
			else{
				$statelist='';
				$citylist='';
			}
		}
		else{
			$countrylist='';
			$statelist='';
			$citylist='';
		}

		$data = array(
            'userService' => $this->userService,
			'owners_city' =>$owners_city,
			'owners_country' =>$owners_country,
			'owners_state' =>$owners_state,
			'countrylist' =>$countrylist,
			'statelist' =>$statelist,
			'citylist' =>$citylist,
        );
        return view('edit_profile', $data);

    }
	/**
     * Update Profile
     *
     * @param Requests\ResetPasswordRequest $request
     * @return mixed
     */
     public function update_profile(Requests\UpdateProfileRequest $request) {
          $fields = $request->all();
		  $uid = $fields['uid'];
		  if(!isset($fields['country'])){
			  $fields['country']='0';
		   }
		   if(!isset($fields['state'])){
			  $fields['state']='0';
		   }
		  if(!isset($fields['city'])){
			  $fields['city']='0';
		   }
		  if(isset($fields['phone']) && $fields['phone']!==''){
		  DB::statement("UPDATE users SET first_name = '$fields[first_name]',last_name = '$fields[last_name]',email = '$fields[email]',phone = '$fields[phone]',
		  no_of_properties ='$fields[no_of_properties]',address = '$fields[address]',pincode = '$fields[pincode]',city_id = '$fields[city]',state_id = '$fields[state]',country_id = '$fields[country]'
		  where users.id = $fields[uid]");

		  }
		  else{
		  DB::statement("UPDATE users SET first_name = '$fields[first_name]',last_name = '$fields[last_name]',email = '$fields[email]',
		  no_of_properties ='$fields[no_of_properties]',address = '$fields[address]',pincode = '$fields[pincode]',city_id = '$fields[city]',state_id = '$fields[state]',country_id = '$fields[country]'
		  where users.id = $fields[uid]");

		  }

		if(isset($fields['images'])){
			$files = $fields['images'];
			if(isset($files) && $files[0]!=''){
				foreach($files as $file) {
					$destinationPath = getcwd() .'/profile_upload/'.$uid.'/';
					$filename = $file->getClientOriginalName();
					$filename = str_replace(" ","",$filename);
					// Build the input for validation
					$fileArray = array('image' => $filename);
					preg_match("/[^\/]+$/", $fileArray['image'], $matches);
					$last_word = $matches[0];

					$extension=array_map('strrev', explode(".",strrev($last_word)));

					// Check to see if validation fails or passes
					if($extension[0] != "jpg" && $extension[0] != "png" && $extension[0] != "jpeg") {
						  // Redirect or return json to frontend with a helpful message to inform the user
						  // that the provided file was not an adequate type
						  //return response()->json(['error' => $validator->errors()->getMessages()], 400);
						  return Redirect::to('/edit_profile_index')->with('show', 'upload_error');
					} else
					{
						// Store the File Now
						// read image from temporary file
						File::cleanDirectory(getcwd() .'/profile_upload/'.$uid.'/');
						$file->move($destinationPath, $filename);
					};
				}
			}
		}

		$ownerid=$this->userService->user->id;

		$owners_city=DB::select( DB::raw("SELECT cities.id,cities.name as city_name FROM users join cities on cities.id=users.city_id where users.id=$ownerid") );

		$owners_country=DB::select( DB::raw("SELECT countries.id,countries.name as country_name,users.country_id FROM users join countries on countries.id=users.country_id where users.id=$ownerid") );

		$owners_state=DB::select( DB::raw("SELECT states.id,states.name as state_name,users.state_id FROM users join states on states.id=users.state_id where users.id=$ownerid") );

		$data = array(
            'userService' => $this->userService,
			'owners_city' =>$owners_city,
			'owners_country' =>$owners_country,
			'owners_state' =>$owners_state
        );
        return Redirect::to('/edit_profile_index');

    }


    /**
     * Send Registration Email
     *
     * @param $user
     */
    public function sendRegistrationEmail($user) {
        Mail::send('emails.registration', ['user' => $user], function($message) use($user) {
            $message->to($user->email, '')->subject('Welcome!')
                ->from('support@propertyproctor.com', 'Property Proctor');
        });
    }

    /**
     * @param $user
     * Send email to user
     */
    protected function sendEmail($user) {
        Mail::send('emails.forgot_password', ['user' => $user], function ($m) use ($user) {
            $m->from('support@propertyproctor.com', 'Property Proctor confirmation code');

            $m->to($user->email)->subject("Property Proctor confirmation code");
        });
    }
	public function email_check()
    {
		if(Request::ajax()) {
	      $data2 = Input::all();
        }
        $email = $data2['email'];
		if (User::where('email', '=', $email)->exists() && $email!='') {
		   // user found
		   echo "exists";
		}
		else{
			echo "not exists";
		}



    }

	/* Facebook,Google login */

	public function redirect()
    {
        return Socialite::with('facebook')->scopes(['email'])->redirect();
    }

    public function callback(SocialAccountService $service)
    {
		$providerUser = \Socialite::driver('facebook')->stateless()->user();
		$name=explode(" ",$providerUser->name);
		if (User::where('email', '=', $providerUser->email)->exists() && $providerUser->email!='') {
		   // user found
		   $user = User::select('users.*')->getByEmail($providerUser->email)->first();
			if($user->verified!=0){
			$user->login();
			$cookie = Cookie::forever('auth_token', $user->auth_token);
			return Redirect::to('/dashboard')->withCookie($cookie);
			}
			else{
			    $rand = base64_encode($providerUser->email);
				return  Redirect::to('/owner_verification/'.$rand);
			}
		}
		elseif($providerUser->email==''){
			return Redirect::to('/login');
		}
		else{

			$digits = 4;
			$rand =str_pad(rand(0, pow(10, $digits)-1), $digits, '0', STR_PAD_LEFT);

			$user =User::create([
            'first_name' => $name[0],
            'last_name' => $name[1],
            'email' => $providerUser->email,
            'phone' => '',
            'password' => password_hash($name[0], PASSWORD_DEFAULT),
            'role_id'=> '1',
            'city_id'=>'0',
			'state_id'=>'0',
            'country_id'=>'0',
			'verified'=>'1',
			'verification_code'=>$rand
        	]);

			$from = 'support@propertyproctor.com';
			$cc='support@propertyproctor.com';
			$cc2='sp.innovizia@gmail.com';
			$to =$providerUser->email;
			$subject = 'Property proctor';

			$message = '<html><head></head><body><div style="width:94%; background-color: #efefef; padding: 50px 20px 30px 20px;">';
			$message .= '<div style="background:#f8f8f8;padding:10px 20px;">';
			$message .= '	<div>';
			$message .= '		<img src="http://propertyproctor.com/images/mail_logo.png" alt="defaultImage" />';
			$message .= '	</div>';
			$message .= '	<div>';
			$message .= '	</div>';
			$message .= '</div>';
			$message .= '<div style="padding:20px; background-color: #fff;">';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif; font-weight:bold; text-transform: capitalize;">Dear '.$name[0].' '.$name[1].',</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Thank you for signing up with www.propertyproctor.com</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">This is your first step towards hassle free increment of income from your rentable property.</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Please expect an email from us guiding you the way to reach your goal of achieving hassle free income from your rentable property.</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Your login details are given below'.'</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">User Id: '.$providerUser->email.'<br>Password: '.$name[0].'</p>';

			/*$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">To verify your email adress please <a target=_blank href=http://propertyproctor.com/login/'.$user->id.'>click here</a> </p>';*/

			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;font-weight:bold">Put the following code at the verification page in the website so that you can continue using propertyproctor.com</p>';


			$message .= '<p style="color:#e88738;font-size: 22.0pt;font-family: Calibri,sans-serif;font-weight:bold">'.$rand.'</p>';

			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Wish you a great hassle free earnings.</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif; font-weight:bold">Property Proctor Team</p>';
			$message .= '</div>';
			$message .= '<div style="background:#f8f8f8;padding:5px 20px;">';
			$message .= '	<div>';
			$message .= '		<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;"> This is an auto-generated email. Please do not reply. </p>';
			$message .= '	</div>';
			$message .= '	<div>';
			$message .= '	</div>';
			$message .= '</div>';
			$message .= '</div></body></html>';

			$headers = 'From: '. $from ."\r\n" .
			'Bcc: '. $cc ."\r\n" .
			'Bcc: '. $cc2 ."\r\n" .
			'X-Mailer: PHP/' . phpversion().
			'MIME-Version: 1.0' . "\r\n".
			'Content-type: text/html; charset=iso-8859-1' . "\r\n";

			$retval = mail($to,$subject,$message,$headers);

			$user = User::select('users.*')->getByEmail($providerUser->email)->first();

			$user->login();
			$cookie = Cookie::forever('auth_token', $user->auth_token);
			return Redirect::to('/dashboard')->withCookie($cookie);
            // $rand = base64_encode($providerUser->email);
			// return  Redirect::to('/owner_verification/'.$rand);
		}
    }

	public function redirectgoogle()
    {
        return Socialite::driver('google')->redirect();
    }

    public function callbackgoogle(SocialAccountService $service)
    {	$providerUser = \Socialite::driver('google')->user();
		$name=explode(" ",$providerUser->name);
		if (User::where('email', '=', $providerUser->email)->exists() && $providerUser->email!='') {
		   // user found
		   $user = User::select('users.*')->getByEmail($providerUser->email)->first();
			if($user->verified!=0){
			    $user->login();
			    $cookie = Cookie::forever('auth_token', $user->auth_token);
			    return Redirect::to('/dashboard')->withCookie($cookie);
			}
			else{
			$rand = base64_encode($providerUser->email);
				return  Redirect::to('/owner_verification/'.$rand);
			}
		}
		elseif($providerUser->email==''){
			return Redirect::to('/login');
		}
		else{

		$digits = 4;
		$rand =str_pad(rand(0, pow(10, $digits)-1), $digits, '0', STR_PAD_LEFT);

	    $user =User::create([
            'first_name' => $name[0],
            'last_name' => $name[1],
            'email' => $providerUser->email,
            'phone' => '',
            'password' => password_hash($name[0], PASSWORD_DEFAULT),
            'role_id'=> '1',
			'state_id'=>'0',
            'city_id'=>'0',
            'country_id'=>'0',
			'verified'=>'1',
			'verification_code'=>$rand
        	]);

			$from = 'support@propertyproctor.com';
			$cc='support@propertyproctor.com';
			$cc2='sp.innovizia@gmail.com';
			$to =$providerUser->email;
			$subject = 'Property proctor';

			$message = '<html><head></head><body><div style="width:94%; background-color: #efefef; padding: 50px 20px 30px 20px;">';
			$message .= '<div style="background:#f8f8f8;padding:10px 20px;">';
			$message .= '	<div>';
			$message .= '		<img src="http://propertyproctor.com/images/mail_logo.png" alt="defaultImage" />';
			$message .= '	</div>';
			$message .= '	<div>';
			$message .= '	</div>';
			$message .= '</div>';
			$message .= '<div style="padding:20px; background-color: #fff;">';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif; font-weight:bold; text-transform: capitalize;">Dear '.$name[0].' '.$name[1].',</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Thank you for signing up with www.propertyproctor.com</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">This is your first step towards hassle free increment of income from your rentable property.</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Please expect an email from us guiding you the way to reach your goal of achieving hassle free income from your rentable property.</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Your login details are given below'.'</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">User Id: '.$providerUser->email.'<br>Password: '.$name[0].'</p>';

			/*$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">To verify your email adress please <a target=_blank href=http://propertyproctor.com/login/'.$user->id.'>click here</a> </p>';*/

			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;font-weight:bold">Put the following code at the verification page in the website so that you can continue using propertyproctor.com</p>';


			$message .= '<p style="color:#e88738;font-size: 22.0pt;font-family: Calibri,sans-serif;font-weight:bold">'.$rand.'</p>';

			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;">Wish you a great hassle free earnings.</p>';
			$message .= '<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif; font-weight:bold">Property Proctor Team</p>';
			$message .= '</div>';
			$message .= '<div style="background:#f8f8f8;padding:5px 20px;">';
			$message .= '	<div>';
			$message .= '		<p style="color:#1f497d;font-size: 11.0pt;font-family: Calibri,sans-serif;"> This is an auto-generated email. Please do not reply. </p>';
			$message .= '	</div>';
			$message .= '	<div>';
			$message .= '	</div>';
			$message .= '</div>';
			$message .= '</div></body></html>';

			$headers = 'From: '. $from ."\r\n" .
			'Bcc: '. $cc ."\r\n" .
			'Bcc: '. $cc2 ."\r\n" .
			'X-Mailer: PHP/' . phpversion().
			'MIME-Version: 1.0' . "\r\n".
			'Content-type: text/html; charset=iso-8859-1' . "\r\n";

			$retval = mail($to,$subject,$message,$headers);

			$user = User::select('users.*')->getByEmail($providerUser->email)->first();

			$user->login();
			$cookie = Cookie::forever('auth_token', $user->auth_token);
			return Redirect::to('/dashboard')->withCookie($cookie);

		}



    }
}
